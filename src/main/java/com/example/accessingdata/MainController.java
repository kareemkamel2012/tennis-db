package com.example.accessingdata;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PlayerRepository playerRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewPlayer (@RequestParam String name
            , @RequestParam String ranking) { //todo: find out how to do this from postman
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Player n = new Player();
        n.setName(name);
        n.setRanking(ranking);
        playerRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Player> getAllPlayers() {
        // This returns a JSON or XML with the players
        return playerRepository.findAll(); //todo: return an https response if not found
    }

    @GetMapping(path="/get/{id}")
    public @ResponseBody Optional<Player> getPlayerById(@PathVariable("id") Integer pathID) {
        // This returns a JSON or XML with the player matching the id if there is one
        return playerRepository.findById(pathID); //todo: return an https response if not found
    }

    @GetMapping(path="/ranking/{ranking}")
    public @ResponseBody Optional<Player> getPlayerByRanking(@PathVariable("ranking") String ranking) {
        // This returns a JSON or XML with the player matching the id if there is one
        return playerRepository.findByRanking(ranking);
    }
}